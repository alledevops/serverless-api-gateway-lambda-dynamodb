AWSTemplateFormatVersion: 2010-09-09
Description: >-
  CloudFormation template for Serverless API with Amazon API Gateway, AWS
  Lambda, and DynamoDB
Parameters:
  TableName:
    Type: String
    Description: Name of the DynamoDB table to create
    Default: lambda-apigateway
Resources:
  DynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: lambda-apigateway-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaDynamoDBPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                  - 'dynamodb:UpdateItem'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: LambdaFunctionOverHttps
      Runtime: python3.7
      Handler: index.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Code:
        ZipFile: |

          from __future__ import print_function

          import boto3
          import json

          print('Loading function')


          def lambda_handler(event, context):
              '''Provide an event that contains the following keys:
                - operation: one of the operations in the operations dict below
                - tableName: required for operations that interact with DynamoDB
                - payload: a parameter to pass to the operation being performed
              '''

              operation = event['operation']

              if 'tableName' in event:
                  dynamo = boto3.resource('dynamodb').Table(event['tableName'])

              operations = {
                  'create': lambda x: dynamo.put_item(**x),
                  'read': lambda x: dynamo.get_item(**x),
                  'update': lambda x: dynamo.update_item(**x),
                  'delete': lambda x: dynamo.delete_item(**x),
                  'list': lambda x: dynamo.scan(**x),
                  'echo': lambda x: x,
                  'ping': lambda x: 'pong'
              }

              if operation in operations:
                  return operations[operation](event.get('payload'))
              else:
                  raise ValueError('Unrecognized operation "{}"'.format(operation))
  ConfigLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - ApiGateway
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref LambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub >-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/DynamoDBManager
  ApiGatewayExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'lambda:InvokeFunction'
                Resource: !GetAtt LambdaFunction.Arn
  ApiGateway:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: DynamoDBOperations
      EndpointConfiguration:
        Types:
          - REGIONAL
  ApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: DynamoDBManager
  ApiMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ''
        Credentials: !GetAtt ApiGatewayExecutionRole.Arn
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
  ApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - ApiMethod
    Properties:
      RestApiId: !Ref ApiGateway
  ApiStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      RestApiId: !Ref ApiGateway
      DeploymentId: !Ref ApiDeployment
      StageName: Prod
Outputs:
  ApiEndpoint:
    Value: !Sub >-
      https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/DynamoDBManager
    Description: Endpoint URL of the deployed API
